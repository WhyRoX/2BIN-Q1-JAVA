3.3 Les classes domaine.Ingredient et Client
Question 1 : Pour rappel, un objet est une instance d’une classe. La classe correspond au type de
l’objet. En UML, la représentation d’une classe est divisée en trois parties. À quoi correspondent ces
parties ?
-> Le nom de la classe, les attributs et les méthodes

Question 2 : Il est important qu’une classe veille à l’encapsulation. En quoi consiste l’encapsulation ?
-> L'encapsulation consiste à regrouper les données et les méthodes qui agissent sur ces données dans une même entité.

Question 3 : Que signifie le fait que la variable numeroSuivant soit soulignée ? Comment traduit-on
cela en java ?
-> Le fait qu'elle soit soulignée signifie qu'elle est static, ça veut donc dire que la variable est partagée par toutes les instances de la classe.


3.4 Égalités référentielles et structurelles
L’égalité référentielle consiste à comparer les références mémoires : deux objets sont considérés
comme égaux s’ils ont la même référence mémoire. En java, on utilise le == pour voir si deux objets
sont égaux.

Dans les faits, on a souvent envie de considérer que deux objets sont égaux s’ils possèdent les
mêmes valeurs pour certains de leurs attributs. Par exemple, si deux clients ont le même numéro, on
veut qu’ils soient considérés comme égaux. C’est ce qu’on appelle l’égalité structurelle.

Question 4 : en Java, que faut-il faire pour définir l’égalité structurelle pour une classe ? Comment
teste-t-on l’égalité structurelle entre deux objets?
-> On peut utiliser la méthode equals().


3.5 La classe Pizza
Comme indiquée sur le diagramme, la classe Pizza doit être abstraite.
Question 5 : quel est l’intérêt d’une classe abstraite ?
-> On ne l'instancie pas directement, elle sert de modèle pour les classes qui en héritent.

Question 6 : La classe pizza possède deux constructeurs. Comment s’appelle le fait d’avoir deux
constructeurs ou d’avoir deux méthodes de même nom ?
-> la surcharge

Question 7 : pour éviter de recopier le code commun, on peut, dans un constructeur d’une classe,
invoquer un autre constructeur de la classe. Comment fait-on cela en java ?
-> On utilise le mot clé this().


3.6 La sous-classe PizzaComposee
À sa création, une pizza composée reçoit son titre, sa description et sa liste d’ingrédients. La
première chose à faire dans son constructeur est d’invoquer le constructeur de sa classe parent.
Question 8 : Comment invoque-t-on le constructeur de la classe parent dans le constructeur d’une
sous-classe.
-> On utilise le mot clé super().


Pour une pizza composée, il n’est pas autorisé de lui ajouter ou de lui supprimer un ingrédient. Afin
d’empêcher ces opérations, les méthodes ont été remises dans la sous-classe PizzaComposee. Dans
la sous-classe, ces méthodes se contenteront de lancer une UnsupportedOperationException
(c’est une classe java héritant de RuntimeException) avec comme message "Les ingrédients d'une
pizza composée ne peuvent pas être modifiés".
Question 9 : Comment appelle-t-on le fait de remettre dans une sous-classe une méthode afin d’en
changer le comportement ?
-> On appelle ça le polymorphisme.

Question 10 : UnsupportedOperationException est-elle une checked ou une unchecked
exception ?
-> C'est une unchecked exception.

Question 11 : Quelles sont les différences entre les checked et les unchecked exceptions ?
-> Les checked exceptions doivent être gérées par le programmeur, les unchecked exceptions non.


3.7 La sous-classe PizzaComposable
À sa création, une pizza composable ne reçoit que le client qui la crée. Son titre doit être initialisé à la
valeur « Pizza composable du client XX» (où XX doit être remplacé par le numéro du client), sa
description à la valeur « Pizza de » suivi du prénom et du nom du client), sa date à la date courante et
ses ingrédients à une liste vide.
Pour obtenir la date courante, il existe, dans la classe LocalDateTime, une méthode statique
now() qui la renvoie.
Question 13 : en java, comme invoque-t-on une méthode statique ?
-> On utilise le nom de la classe suivi de la méthode.